// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/database/dbwallethistory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/BelyaevEI/e-wallet/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockWalletHist is a mock of WalletHist interface.
type MockWalletHist struct {
	ctrl     *gomock.Controller
	recorder *MockWalletHistMockRecorder
}

// MockWalletHistMockRecorder is the mock recorder for MockWalletHist.
type MockWalletHistMockRecorder struct {
	mock *MockWalletHist
}

// NewMockWalletHist creates a new mock instance.
func NewMockWalletHist(ctrl *gomock.Controller) *MockWalletHist {
	mock := &MockWalletHist{ctrl: ctrl}
	mock.recorder = &MockWalletHistMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletHist) EXPECT() *MockWalletHistMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockWalletHist) Get(ctx context.Context, id uint32) ([]models.WalletHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].([]models.WalletHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWalletHistMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWalletHist)(nil).Get), ctx, id)
}

// WriteTransation mocks base method.
func (m *MockWalletHist) WriteTransation(ctx context.Context, walletFrom, walletTo models.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTransation", ctx, walletFrom, walletTo)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTransation indicates an expected call of WriteTransation.
func (mr *MockWalletHistMockRecorder) WriteTransation(ctx, walletFrom, walletTo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTransation", reflect.TypeOf((*MockWalletHist)(nil).WriteTransation), ctx, walletFrom, walletTo)
}
